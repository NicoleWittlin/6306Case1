state=as.factor(c("AK", "AL", "AR", "AZ", "CA", "CO", "CT", "DC", "DE", "FL", "GA",
"HI", "IA", "ID", "IL", "IN", "KS", "KY", "LA", "MA", "MD", "ME",
"MI", "MN", "MO", "MS",  "MT", "NC", "ND", "NE", "NH", "NJ", "NM",
"NV", "NY", "OH", "OK", "OR", "PA", "PR", "RI", "SC", "SD", "TN",
"TX", "UT", "VA", "VT", "WA", "WI", "WV", "WY")),
full=as.factor(c("alaska","alabama","arkansas","arizona","california","colorado",
"connecticut","district of columbia","delaware","florida","georgia",
"hawaii","iowa","idaho","illinois","indiana","kansas","kentucky",
"louisiana","massachusetts","maryland","maine","michigan","minnesota",
"missouri","mississippi","montana","north carolina","north dakota",
"nebraska","new hampshire","new jersey","new mexico","nevada",
"new york","ohio","oklahoma","oregon","pennsylvania","puerto rico",
"rhode island","south carolina","south dakota","tennessee","texas",
"utah","virginia","vermont","washington","wisconsin",
"west virginia","wyoming"))
)
#create an nx1 data.frame of state codes from source column
st.x<-data.frame(state=x)
#match source codes with codes from 'st.codes' local variable and use to return the full state name
refac.x<-st.codes$full[match(st.x$state,st.codes$state)]
#return the full state names in the same order in which they appeared in the original source
return(refac.x)
}
median_table$State <- stateFromLower(median_table$State)
median_tablem <- reshape2::melt(median_table, id=1)
map_data <-map_data("state")
median_tablem <- median_tablem
#ggplot(data = na.omit(median_tablem), aes(map_id = State)) + geom_map(aes(fill=value), map=map_data, na.rm = TRUE) +  #theme(legend.text=element_text(size=24)) + theme(axis.text = element_text(size = 18), axis.title = element_text(size = #rel(1.75))) + theme(legend.key.size = unit(3, "in")) + expand_limits(x=map_data$long, y=map_data$lat)
kable((median_table), "html") %>% kable_styling(bootstrap_options="striped", full_width = F, font_size = 14)
# Chunk 8
summary_ABV <- (summary(Beer_Data$ABV))
summary_ABV
# Chunk 9
par(las=2)
par(mar = c(3, 3, 1, 1))
plot(Beer_Data$ABV ~ Beer_Data$IBU, main = "Relationship between ABV and IBU", xlab = "ABV", ylab = "IBU")
# Chunk 1
#setwd("C:/Users/Marin Family/Desktop/Doing Data Science/Case Study1 Git")
#Read the data
Beers <- read.csv("Beers.csv", encoding='UTF-8')
Brews <- read.csv("Breweries.csv", encoding='UTF-8', sep=",")
# Chunk 2
State_Brews <-  aggregate(Brew_ID ~ State , Brews, length)
colnames(State_Brews) <- c("State","NumberofBreweries")
State_Brews <- State_Brews[order(-State_Brews$NumberofBreweries,decreasing = TRUE),]
par(las=2)
par(mar = c(3, 3, 1, 1))
barplot(State_Brews$NumberofBreweries, names.arg = State_Brews$State, col = "Red", main = "Number of Breweries per State",  xlab = "Count", ylab = "State",  xlim = c(0,50), horiz = TRUE)
# Chunk 3
State_Brews <-  aggregate(Brew_ID ~ State , Brews, length)
colnames(State_Brews) <- c("State","NumberofBreweries")
State_Brews <- State_Brews[order(-State_Brews$NumberofBreweries,decreasing = TRUE),]
library(ggplot2)
library(maps)
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
State_Brews$State <- trim(State_Brews$State) #trim leading and trailing spaces from State
stateFromLower <-function(x) {
#read 52 state codes into local variable [includes DC (Washington D.C. and PR (Puerto Rico)]
st.codes<-data.frame(
state=as.factor(c("AK", "AL", "AR", "AZ", "CA", "CO", "CT", "DC", "DE", "FL", "GA",
"HI", "IA", "ID", "IL", "IN", "KS", "KY", "LA", "MA", "MD", "ME",
"MI", "MN", "MO", "MS",  "MT", "NC", "ND", "NE", "NH", "NJ", "NM",
"NV", "NY", "OH", "OK", "OR", "PA", "PR", "RI", "SC", "SD", "TN",
"TX", "UT", "VA", "VT", "WA", "WI", "WV", "WY")),
full=as.factor(c("alaska","alabama","arkansas","arizona","california","colorado",
"connecticut","district of columbia","delaware","florida","georgia",
"hawaii","iowa","idaho","illinois","indiana","kansas","kentucky",
"louisiana","massachusetts","maryland","maine","michigan","minnesota",
"missouri","mississippi","montana","north carolina","north dakota",
"nebraska","new hampshire","new jersey","new mexico","nevada",
"new york","ohio","oklahoma","oregon","pennsylvania","puerto rico",
"rhode island","south carolina","south dakota","tennessee","texas",
"utah","virginia","vermont","washington","wisconsin",
"west virginia","wyoming"))
)
#create an nx1 data.frame of state codes from source column
st.x<-data.frame(state=x)
#match source codes with codes from 'st.codes' local variable and use to return the full state name
refac.x<-st.codes$full[match(st.x$state,st.codes$state)]
#return the full state names in the same order in which they appeared in the original source
return(refac.x)
}
State_Brews$State <- stateFromLower(State_Brews$State)
State_Brewsm <- reshape2::melt(State_Brews, id=1)
ggplot(State_Brewsm, aes(map_id = State)) + geom_map(aes(fill=value), map=map_data, na.rm =  TRUE ) +  theme(legend.text=element_text(size=24)) + theme(axis.text = element_text(size = 18), axis.title = element_text(size = rel(1.75))) + theme(legend.key.size = unit(3, "in")) + expand_limits(x=map_data$long, y=map_data$lat)
# Chunk 4
library(sqldf)
library(magrittr)
library(kableExtra)
Beer_Data <- sqldf("select a.Brew_ID, a.Name as 'BrewName', a.City, a.State, b.Name as 'BeerName', b.ABV, b.IBU, b.Style, b.Ounces from Brews a join Beers b on a.Brew_ID = b.Brewery_id")
kable(head(Beer_Data), "html") %>% kable_styling(bootstrap_options="striped", full_width = F, font_size = 14)
# Chunk 5
kable(tail(Beer_Data), "html") %>% kable_styling(bootstrap_options="striped", full_width = F, font_size = 14)
# Chunk 6
Brew_ID_NA <-sum(is.na(Beer_Data$Brew_ID))
BrewName_NA<-sum(is.na(Beer_Data$BrewName))
City_NA <- sum(is.na(Beer_Data$City))
State_NA <- sum(is.na(Beer_Data$State))
BeerName_NA <- sum(is.na(Beer_Data$BeerName))
ABV_NA <- sum(is.na(Beer_Data$ABV))
IBU_NA <- sum(is.na(Beer_Data$IBU))
Style_NA <- sum(is.na(Beer_Data$Style))
Ounces_NA <- sum(is.na(Beer_Data$Ounces))
na_columns <- data.frame(matrix(ncol =2, nrow=0))
colnames(na_columns) <- c("ColumnName", "NumberOfNAs")
na_columns[nrow(na_columns) +1,] = c("Brew_ID", Brew_ID_NA)
na_columns[nrow(na_columns) +1,] = c("BrewName", BrewName_NA)
na_columns[nrow(na_columns) +1,] = c("City", City_NA)
na_columns[nrow(na_columns) +1,] = c("State", State_NA)
na_columns[nrow(na_columns) +1,] = c("BeerName", BeerName_NA)
na_columns[nrow(na_columns) +1,] = c("ABV", ABV_NA)
na_columns[nrow(na_columns) +1,] = c("IBU", IBU_NA)
na_columns[nrow(na_columns) +1,] = c("Style", Style_NA)
na_columns[nrow(na_columns) +1,] = c("Ounces", Ounces_NA)
kable((na_columns), "html") %>% kable_styling(bootstrap_options="striped", full_width = F, font_size = 14)
# Chunk 7
ABV_Median <- aggregate(ABV ~ State, data = Beer_Data, median, na.action = na.omit)
IBU_Median <- aggregate(IBU ~ State, data = Beer_Data, median, na.action = na.omit)
median_table <- sqldf("select a.State, ABV as 'ABV Median', b.IBU as 'IBU Median' from ABV_Median a left join IBU_Median b on a.State = b.State")
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
median_table$State <- trim(State_Brews$State) #trim leading and trailing spaces from State
stateFromLower <-function(x) {
#read 52 state codes into local variable [includes DC (Washington D.C. and PR (Puerto Rico)]
st.codes<-data.frame(
state=as.factor(c("AK", "AL", "AR", "AZ", "CA", "CO", "CT", "DC", "DE", "FL", "GA",
"HI", "IA", "ID", "IL", "IN", "KS", "KY", "LA", "MA", "MD", "ME",
"MI", "MN", "MO", "MS",  "MT", "NC", "ND", "NE", "NH", "NJ", "NM",
"NV", "NY", "OH", "OK", "OR", "PA", "PR", "RI", "SC", "SD", "TN",
"TX", "UT", "VA", "VT", "WA", "WI", "WV", "WY")),
full=as.factor(c("alaska","alabama","arkansas","arizona","california","colorado",
"connecticut","district of columbia","delaware","florida","georgia",
"hawaii","iowa","idaho","illinois","indiana","kansas","kentucky",
"louisiana","massachusetts","maryland","maine","michigan","minnesota",
"missouri","mississippi","montana","north carolina","north dakota",
"nebraska","new hampshire","new jersey","new mexico","nevada",
"new york","ohio","oklahoma","oregon","pennsylvania","puerto rico",
"rhode island","south carolina","south dakota","tennessee","texas",
"utah","virginia","vermont","washington","wisconsin",
"west virginia","wyoming"))
)
#create an nx1 data.frame of state codes from source column
st.x<-data.frame(state=x)
#match source codes with codes from 'st.codes' local variable and use to return the full state name
refac.x<-st.codes$full[match(st.x$state,st.codes$state)]
#return the full state names in the same order in which they appeared in the original source
return(refac.x)
}
median_table$State <- stateFromLower(median_table$State)
median_tablem <- reshape2::melt(median_table, id=1)
map_data <-map_data("state")
median_tablem <- median_tablem
#ggplot(data = na.omit(median_tablem), aes(map_id = State)) + geom_map(aes(fill=value), map=map_data, na.rm = TRUE) +  #theme(legend.text=element_text(size=24)) + theme(axis.text = element_text(size = 18), axis.title = element_text(size = #rel(1.75))) + theme(legend.key.size = unit(3, "in")) + expand_limits(x=map_data$long, y=map_data$lat)
kable((median_table), "html") %>% kable_styling(bootstrap_options="striped", full_width = F, font_size = 14)
# Chunk 8
summary_ABV <- (summary(Beer_Data$ABV))
summary_ABV
# Chunk 9
par(las=2)
par(mar = c(3, 3, 1, 1))
plot(Beer_Data$ABV ~ Beer_Data$IBU, main = "Relationship between ABV and IBU", xlab = "ABV", ylab = "IBU")
# Chunk 1
#setwd("C:/Users/Marin Family/Desktop/Doing Data Science/Case Study1 Git")
#Read the data
Beers <- read.csv("Beers.csv", encoding='UTF-8')
Brews <- read.csv("Breweries.csv", encoding='UTF-8', sep=",")
# Chunk 2
State_Brews <-  aggregate(Brew_ID ~ State , Brews, length)
colnames(State_Brews) <- c("State","NumberofBreweries")
State_Brews <- State_Brews[order(-State_Brews$NumberofBreweries,decreasing = TRUE),]
par(las=2)
par(mar = c(3, 3, 1, 1))
barplot(State_Brews$NumberofBreweries, names.arg = State_Brews$State, col = "Red", main = "Number of Breweries per State",  xlab = "Count", ylab = "State",  xlim = c(0,50), horiz = TRUE)
# Chunk 3
State_Brews <-  aggregate(Brew_ID ~ State , Brews, length)
colnames(State_Brews) <- c("State","NumberofBreweries")
State_Brews <- State_Brews[order(-State_Brews$NumberofBreweries,decreasing = TRUE),]
library(ggplot2)
library(maps)
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
State_Brews$State <- trim(State_Brews$State) #trim leading and trailing spaces from State
stateFromLower <-function(x) {
#read 52 state codes into local variable [includes DC (Washington D.C. and PR (Puerto Rico)]
st.codes<-data.frame(
state=as.factor(c("AK", "AL", "AR", "AZ", "CA", "CO", "CT", "DC", "DE", "FL", "GA",
"HI", "IA", "ID", "IL", "IN", "KS", "KY", "LA", "MA", "MD", "ME",
"MI", "MN", "MO", "MS",  "MT", "NC", "ND", "NE", "NH", "NJ", "NM",
"NV", "NY", "OH", "OK", "OR", "PA", "PR", "RI", "SC", "SD", "TN",
"TX", "UT", "VA", "VT", "WA", "WI", "WV", "WY")),
full=as.factor(c("alaska","alabama","arkansas","arizona","california","colorado",
"connecticut","district of columbia","delaware","florida","georgia",
"hawaii","iowa","idaho","illinois","indiana","kansas","kentucky",
"louisiana","massachusetts","maryland","maine","michigan","minnesota",
"missouri","mississippi","montana","north carolina","north dakota",
"nebraska","new hampshire","new jersey","new mexico","nevada",
"new york","ohio","oklahoma","oregon","pennsylvania","puerto rico",
"rhode island","south carolina","south dakota","tennessee","texas",
"utah","virginia","vermont","washington","wisconsin",
"west virginia","wyoming"))
)
#create an nx1 data.frame of state codes from source column
st.x<-data.frame(state=x)
#match source codes with codes from 'st.codes' local variable and use to return the full state name
refac.x<-st.codes$full[match(st.x$state,st.codes$state)]
#return the full state names in the same order in which they appeared in the original source
return(refac.x)
}
State_Brews$State <- stateFromLower(State_Brews$State)
State_Brewsm <- reshape2::melt(State_Brews, id=1)
map_data <-map_data("state")
ggplot(State_Brewsm, aes(map_id = State)) + geom_map(aes(fill=value), map=map_data) +  theme(legend.text=element_text(size=24)) + theme(axis.text = element_text(size = 18), axis.title = element_text(size = rel(1.75))) + theme(legend.key.size = unit(3, "in")) + expand_limits(x=map_data$long, y=map_data$lat)
# Chunk 4
library(sqldf)
library(magrittr)
library(kableExtra)
Beer_Data <- sqldf("select a.Brew_ID, a.Name as 'BrewName', a.City, a.State, b.Name as 'BeerName', b.ABV, b.IBU, b.Style, b.Ounces from Brews a join Beers b on a.Brew_ID = b.Brewery_id")
kable(head(Beer_Data), "html") %>% kable_styling(bootstrap_options="striped", full_width = F, font_size = 14)
# Chunk 5
kable(tail(Beer_Data), "html") %>% kable_styling(bootstrap_options="striped", full_width = F, font_size = 14)
# Chunk 6
Brew_ID_NA <-sum(is.na(Beer_Data$Brew_ID))
BrewName_NA<-sum(is.na(Beer_Data$BrewName))
City_NA <- sum(is.na(Beer_Data$City))
State_NA <- sum(is.na(Beer_Data$State))
BeerName_NA <- sum(is.na(Beer_Data$BeerName))
ABV_NA <- sum(is.na(Beer_Data$ABV))
IBU_NA <- sum(is.na(Beer_Data$IBU))
Style_NA <- sum(is.na(Beer_Data$Style))
Ounces_NA <- sum(is.na(Beer_Data$Ounces))
na_columns <- data.frame(matrix(ncol =2, nrow=0))
colnames(na_columns) <- c("ColumnName", "NumberOfNAs")
na_columns[nrow(na_columns) +1,] = c("Brew_ID", Brew_ID_NA)
na_columns[nrow(na_columns) +1,] = c("BrewName", BrewName_NA)
na_columns[nrow(na_columns) +1,] = c("City", City_NA)
na_columns[nrow(na_columns) +1,] = c("State", State_NA)
na_columns[nrow(na_columns) +1,] = c("BeerName", BeerName_NA)
na_columns[nrow(na_columns) +1,] = c("ABV", ABV_NA)
na_columns[nrow(na_columns) +1,] = c("IBU", IBU_NA)
na_columns[nrow(na_columns) +1,] = c("Style", Style_NA)
na_columns[nrow(na_columns) +1,] = c("Ounces", Ounces_NA)
kable((na_columns), "html") %>% kable_styling(bootstrap_options="striped", full_width = F, font_size = 14)
# Chunk 7
ABV_Median <- aggregate(ABV ~ State, data = Beer_Data, median, na.action = na.omit)
IBU_Median <- aggregate(IBU ~ State, data = Beer_Data, median, na.action = na.omit)
median_table <- sqldf("select a.State, ABV as 'ABV Median', b.IBU as 'IBU Median' from ABV_Median a left join IBU_Median b on a.State = b.State")
kable((median_table), "html") %>% kable_styling(bootstrap_options="striped", full_width = F, font_size = 14)
# Chunk 8
summary_ABV <- (summary(Beer_Data$ABV))
summary_ABV
# Chunk 9
par(las=2)
par(mar = c(3, 3, 1, 1))
plot(Beer_Data$ABV ~ Beer_Data$IBU, main = "Relationship between ABV and IBU", xlab = "ABV", ylab = "IBU")
g <- ggplot(Beer_Data, aes(ABV, IBU))
# Scatterplot
g + geom_point() +
geom_smooth(method="lm", se=F) +
labs(subtitle="mpg: city vs highway mileage",
y="ABV",
x="IBU",
title="Relationship between ABV and IBU")
View(Beer_Data)
View(Beer_Data)
g <- ggplot(Beer_Data, aes(ABV, IBU))
# Scatterplot
g + geom_point() +
geom_smooth(method="lm", se=F) +
labs(subtitle="mpg: city vs highway mileage",
y="IBU",
x="ABV",
title="Relationship between ABV and IBU")
g <- ggplot(Beer_Data, aes(ABV, IBU))
# Scatterplot
g + geom_point() +
geom_smooth(method="lm", se=F) +
labs(y="IBU",
x="ABV",
title="Relationship between ABV and IBU")
g <- ggplot(Beer_Data, aes(ABV, IBU))
# Scatterplot
g + geom_point() +
geom_smooth(method="lm", se=F) +
labs(y="IBU",
x="ABV",
title="Relationship between ABV and IBU")  + scale_colour_gradient(low = "blue")
g <- ggplot(Beer_Data, aes(ABV, IBU))
# Scatterplot
g + geom_point() +
geom_smooth(method="lm", se=F) +  scale_colour_gradient(low = "blue") +
labs(y="IBU",
x="ABV",
title="Relationship between ABV and IBU")
g <- ggplot(Beer_Data, aes(ABV, IBU))
# Scatterplot
g + geom_point() +
geom_smooth(method="lm", se=F) +  geom_point(aes(colour = cyl)) + scale_colour_gradient(low = "blue") +
labs(y="IBU",
x="ABV",
title="Relationship between ABV and IBU")
g <- ggplot(Beer_Data, aes(ABV, IBU))
# Scatterplot
g + geom_point() +
geom_smooth(method="lm", se=F) +  geom_point(aes(colour = ABV)) + scale_colour_gradient(low = "blue") +
labs(y="IBU",
x="ABV",
title="Relationship between ABV and IBU")
g <- ggplot(Beer_Data, aes(ABV, IBU))
# Scatterplot
g + geom_point() +
geom_smooth(method="lm", se=F) +  geom_point(aes(colour = ABV, IBU)) + scale_colour_gradient(low = "blue") +
labs(y="IBU",
x="ABV",
title="Relationship between ABV and IBU")
g <- ggplot(Beer_Data, aes(ABV, IBU))
# Scatterplot
g + geom_point() +
geom_smooth(method="lm", se=F) +  geom_point(aes(colour = ABV)) + scale_colour_gradient(low = "blue") +
labs(y="IBU",
x="ABV",
title="Relationship between ABV and IBU")
g <- ggplot(Beer_Data, aes(ABV, IBU))
# Scatterplot
g + geom_point() +
geom_smooth(method="lm", se=F) +
labs(y="IBU",
x="ABV",
title="Relationship between ABV and IBU")
# Scatterplot
g + geom_point() +
geom_smooth(method="lm", se=F) +
labs(y="IBU",
x="ABV",
title="Relationship between ABV and IBU")
g <- ggplot(Beer_Data, aes(ABV, IBU))
# Scatterplot
g + geom_point() +
geom_smooth(method="lm", se=F) +
labs(y="IBU",
x="ABV",
title="Relationship between ABV and IBU")
median_table <- sqldf("select a.State, ABV as 'ABV Median', b.IBU as 'IBU Median' from ABV_Median a left join IBU_Median b on a.State = b.State")
median_table$State <- stateFromLower(median_table$State)
map_data <-map_data("state")
ggplot(median_tableM, aes(map_id = State)) + geom_map(aes(fill=value), map=map_data) +  theme(legend.text=element_text(size=24)) + theme(axis.text = element_text(size = 18), axis.title = element_text(size = rel(1.75))) + theme(legend.key.size = unit(3, "in")) + expand_limits(x=map_data$long, y=map_data$lat)
median_tableM <- reshape2::melt(median_table, id=1)
map_data <-map_data("state")
ggplot(median_tableM, aes(map_id = State)) + geom_map(aes(fill=value), map=map_data) +  theme(legend.text=element_text(size=24)) + theme(axis.text = element_text(size = 18), axis.title = element_text(size = rel(1.75))) + theme(legend.key.size = unit(3, "in")) + expand_limits(x=map_data$long, y=map_data$lat)
ggplot(median_tableM, aes(map_id = State)) + geom_map(aes(fill=value), map=map_data, na.rm = TRUE) +  theme(legend.text=element_text(size=24)) + theme(axis.text = element_text(size = 18), axis.title = element_text(size = rel(1.75))) + theme(legend.key.size = unit(3, "in")) + expand_limits(x=map_data$long, y=map_data$lat)
ggplot(data = na.omit(median_tableM), aes(map_id = State)) + geom_map(aes(fill=value), map=map_data, na.rm = TRUE) +  theme(legend.text=element_text(size=24)) + theme(axis.text = element_text(size = 18), axis.title = element_text(size = rel(1.75))) + theme(legend.key.size = unit(3, "in")) + expand_limits(x=map_data$long, y=map_data$lat)
ggplot(data = na.omit(median_tableM), aes(map_id = State)) + geom_map(aes(fill=value), map=map_data) +  theme(legend.text=element_text(size=24)) + theme(axis.text = element_text(size = 18), axis.title = element_text(size = rel(1.75))) + theme(legend.key.size = unit(3, "in")) + expand_limits(x=map_data$long, y=map_data$lat)
ggplot(data = na.omit(median_tableM), aes(map_id = State)) + geom_map(aes(fill=value), map=map_data) +  theme(legend.text=element_text(size=24)) + theme(axis.text = element_text(size = 18), axis.title = element_text(size = rel(1.75))) + theme(legend.key.size = unit(3, "in")) + expand_limits(x=map_data$long, y=map_data$lat)
View(median_tableM)
View(median_tableM)
ABV_Median <- aggregate(ABV ~ State, data = Beer_Data, median, na.action = na.omit)
IBU_Median <- aggregate(IBU ~ State, data = Beer_Data, median, na.action = na.omit)
median_table <- sqldf("select a.State, ABV as 'ABV Median', b.IBU as 'IBU Median' from ABV_Median a left join IBU_Median b on a.State = b.State")
median_table$State <- stateFromLower(median_table$State)
View(median_table)
median_table$State <- trim(State_Brews$State) #trim leading and trailing spaces from State
median_table$State <- stateFromLower(median_table$State)
median_tableM <- reshape2::melt(median_table, id=1)
map_data <-map_data("state")
View(median_table)
median_table <- sqldf("select a.State, ABV as 'ABV Median', b.IBU as 'IBU Median' from ABV_Median a left join IBU_Median b on a.State = b.State")
View(median_table)
View(median_table)
median_table$State <- trim(median_table$State) #trim leading and trailing spaces from State
View(median_table)
View(median_table)
median_table$State <- stateFromLower(median_table$State)
median_tableM <- reshape2::melt(median_table, id=1)
map_data <-map_data("state")
ggplot(data = na.omit(median_tableM), aes(map_id = State)) + geom_map(aes(fill=value), map=map_data) +  theme(legend.text=element_text(size=24)) + theme(axis.text = element_text(size = 18), axis.title = element_text(size = rel(1.75))) + theme(legend.key.size = unit(3, "in")) + expand_limits(x=map_data$long, y=map_data$lat)
View(median_tableM)
View(median_tableM)
View(State_Brewsm)
View(State_Brewsm)
ggplot(data = na.omit(median_tableM), aes(map_id = State)) + geom_map(aes(fill=value), map=map_data) +  theme(legend.text=element_text(size=24)) + theme(axis.text = element_text(size = 18), axis.title = element_text(size = rel(1.75))) + theme(legend.key.size = unit(3, "in")) + expand_limits(x=map_data$long, y=map_data$lat) + scale_fill_gradient()
ggplot(data = na.omit(median_tableM), aes(map_id = State)) + geom_map(aes(fill=value), map=map_data) +  theme(legend.text=element_text(size=1)) + theme(axis.text = element_text(size = 18), axis.title = element_text(size = rel(1.75))) + theme(legend.key.size = unit(3, "in")) + expand_limits(x=map_data$long, y=map_data$lat)
ggplot(data = na.omit(median_tableM), aes(map_id = State)) + geom_map(aes(fill=value), map=map_data) +  theme(legend.text=element_text(size=24)) + theme(axis.text = element_text(size = 18), axis.title = element_text(size = rel(1.75))) + theme(legend.key.size = unit(3, "in")) + expand_limits(x=map_data$long, y=map_data$lat)
ggplot(data = na.omit(median_tableM), aes(map_id = State)) + geom_map(aes(fill=value), map=map_data) +  theme(legend.text=element_text(size=24)) + theme(axis.text = element_text(size = 24), axis.title = element_text(size = rel(1.75))) + theme(legend.key.size = unit(3, "in")) + expand_limits(x=map_data$long, y=map_data$lat)
ggplot(data = na.omit(median_tableM), aes(map_id = State)) + geom_map(aes(fill=value), map=map_data) +  theme(legend.text=element_text(size=24)) + theme(axis.text = element_text(size = 18), axis.title = element_text(size = rel(1.75))) + theme(legend.key.size = unit(1, "in")) + expand_limits(x=map_data$long, y=map_data$lat)
st.x<-data.frame(state=x)
st.x<-data.frame(state=x)
trim <- function (x) gsub("^\\s+|\\s+$", "", x)
st.x<-data.frame(state=x)
stateFromLower <-function(x) {
#read 52 state codes into local variable [includes DC (Washington D.C. and PR (Puerto Rico)]
st.codes<-data.frame(
state=as.factor(c("AK", "AL", "AR", "AZ", "CA", "CO", "CT", "DC", "DE", "FL", "GA",
"HI", "IA", "ID", "IL", "IN", "KS", "KY", "LA", "MA", "MD", "ME",
"MI", "MN", "MO", "MS",  "MT", "NC", "ND", "NE", "NH", "NJ", "NM",
"NV", "NY", "OH", "OK", "OR", "PA", "PR", "RI", "SC", "SD", "TN",
"TX", "UT", "VA", "VT", "WA", "WI", "WV", "WY")),
full=as.factor(c("alaska","alabama","arkansas","arizona","california","colorado",
"connecticut","district of columbia","delaware","florida","georgia",
"hawaii","iowa","idaho","illinois","indiana","kansas","kentucky",
"louisiana","massachusetts","maryland","maine","michigan","minnesota",
"missouri","mississippi","montana","north carolina","north dakota",
"nebraska","new hampshire","new jersey","new mexico","nevada",
"new york","ohio","oklahoma","oregon","pennsylvania","puerto rico",
"rhode island","south carolina","south dakota","tennessee","texas",
"utah","virginia","vermont","washington","wisconsin",
"west virginia","wyoming"))
)
library(ggplot2)
library(maps)
st.x<-data.frame(state=x)
st.x<-data.frame(state=x)
refac.x<-st.codes$full[match(st.x$state,st.codes$state)]
stateFromLower <-function(x) {
#read 52 state codes into local variable [includes DC (Washington D.C. and PR (Puerto Rico)]
st.codes<-data.frame(
state=as.factor(c("AK", "AL", "AR", "AZ", "CA", "CO", "CT", "DC", "DE", "FL", "GA",
"HI", "IA", "ID", "IL", "IN", "KS", "KY", "LA", "MA", "MD", "ME",
"MI", "MN", "MO", "MS",  "MT", "NC", "ND", "NE", "NH", "NJ", "NM",
"NV", "NY", "OH", "OK", "OR", "PA", "PR", "RI", "SC", "SD", "TN",
"TX", "UT", "VA", "VT", "WA", "WI", "WV", "WY")),
full=as.factor(c("alaska","alabama","arkansas","arizona","california","colorado",
"connecticut","district of columbia","delaware","florida","georgia",
"hawaii","iowa","idaho","illinois","indiana","kansas","kentucky",
"louisiana","massachusetts","maryland","maine","michigan","minnesota",
"missouri","mississippi","montana","north carolina","north dakota",
"nebraska","new hampshire","new jersey","new mexico","nevada",
"new york","ohio","oklahoma","oregon","pennsylvania","puerto rico",
"rhode island","south carolina","south dakota","tennessee","texas",
"utah","virginia","vermont","washington","wisconsin",
"west virginia","wyoming"))
)
stateFromLower <-function(x) {
#read 52 state codes into local variable [includes DC (Washington D.C. and PR (Puerto Rico)]
st.codes<-data.frame(
state=as.factor(c("AK", "AL", "AR", "AZ", "CA", "CO", "CT", "DC", "DE", "FL", "GA",
"HI", "IA", "ID", "IL", "IN", "KS", "KY", "LA", "MA", "MD", "ME",
"MI", "MN", "MO", "MS",  "MT", "NC", "ND", "NE", "NH", "NJ", "NM",
"NV", "NY", "OH", "OK", "OR", "PA", "PR", "RI", "SC", "SD", "TN",
"TX", "UT", "VA", "VT", "WA", "WI", "WV", "WY")),
full=as.factor(c("alaska","alabama","arkansas","arizona","california","colorado",
"connecticut","district of columbia","delaware","florida","georgia",
"hawaii","iowa","idaho","illinois","indiana","kansas","kentucky",
"louisiana","massachusetts","maryland","maine","michigan","minnesota",
"missouri","mississippi","montana","north carolina","north dakota",
"nebraska","new hampshire","new jersey","new mexico","nevada",
"new york","ohio","oklahoma","oregon","pennsylvania","puerto rico",
"rhode island","south carolina","south dakota","tennessee","texas",
"utah","virginia","vermont","washington","wisconsin",
"west virginia","wyoming"))
)
#create an nx1 data.frame of state codes from source column
st.x<-data.frame(state=x)
#match source codes with codes from 'st.codes' local variable and use to return the full state name
refac.x<-st.codes$full[match(st.x$state,st.codes$state)]
#return the full state names in the same order in which they appeared in the original source
return(refac.x)
}
stateFromLower <-function(x) {
#read 52 state codes into local variable [includes DC (Washington D.C. and PR (Puerto Rico)]
st.codes<-data.frame(
state=as.factor(c("AK", "AL", "AR", "AZ", "CA", "CO", "CT", "DC", "DE", "FL", "GA",
"HI", "IA", "ID", "IL", "IN", "KS", "KY", "LA", "MA", "MD", "ME",
"MI", "MN", "MO", "MS",  "MT", "NC", "ND", "NE", "NH", "NJ", "NM",
"NV", "NY", "OH", "OK", "OR", "PA", "PR", "RI", "SC", "SD", "TN",
"TX", "UT", "VA", "VT", "WA", "WI", "WV", "WY")),
full=as.factor(c("alaska","alabama","arkansas","arizona","california","colorado",
"connecticut","district of columbia","delaware","florida","georgia",
"hawaii","iowa","idaho","illinois","indiana","kansas","kentucky",
"louisiana","massachusetts","maryland","maine","michigan","minnesota",
"missouri","mississippi","montana","north carolina","north dakota",
"nebraska","new hampshire","new jersey","new mexico","nevada",
"new york","ohio","oklahoma","oregon","pennsylvania","puerto rico",
"rhode island","south carolina","south dakota","tennessee","texas",
"utah","virginia","vermont","washington","wisconsin",
"west virginia","wyoming"))
)
#create an nx1 data.frame of state codes from source column
st.x<-data.frame(state=x)
#match source codes with codes from 'st.codes' local variable and use to return the full state name
refac.x<-st.codes$full[match(st.x$state,st.codes$state)]
#return the full state names in the same order in which they appeared in the original source
return(refac.x)
}
View(median_tableM)
ggplot(data = na.omit(median_tableM), aes(map_id = State)) + geom_map(aes(fill=value), map=map_data) +  theme(legend.text=element_text(size=24)) + theme(axis.text = element_text(size = 18), axis.title = element_text(size = rel(1.75))) + theme(legend.key.size = unit(1, "in")) + expand_limits(x=map_data$long, y=map_data$lat)
median_table$State <- stateFromLower(median_table$State)
median_tableM <- reshape2::melt(median_table, id=1)
map_data <-map_data("state")
median_table$State <- trim(median_table$State) #trim leading and trailing spaces from State
map <- ggplot(median_tableM, aes(x=long, y=lat)) +
geom_polygon(aes(group=group, fill=value), col=NA,lwd=0)
map + scale_colour_gradient(low='white', high='grey20')
map + scale_colour_grey()
map <- ggplot(median_tableM, aes(x=long, y=lat)) +
geom_polygon(aes(group=state, fill=value), col=NA,lwd=0)
map + scale_colour_gradient(low='white', high='grey20')
map + scale_colour_grey()
View(median_tableM)
median_table <- sqldf("select a.State, ABV as 'ABV Median', b.IBU as 'IBU Median' from ABV_Median a left join IBU_Median b on a.State = b.State")
median_table$State <- trim(median_table$State) #trim leading and trailing spaces from State
median_table$State <- stateFromLower(median_table$State)
median_tableM <- reshape2::melt(median_table, id=1)
map_data <-map_data("state")
View(median_tableM)
map <- ggplot(median_tableM, aes(x=long, y=lat)) +
geom_polygon(aes(group=state, fill=value), col=NA,lwd=0)
map + scale_colour_gradient(low='white', high='grey20')
map + scale_colour_grey()
View(trainset)
View(mytestset)
View(mytestset)
ggplot(data = na.omit(median_tableM), aes(map_id = State)) + geom_map(aes(fill=value), map=map_data) +  theme(legend.text=element_text(size=24)) + theme(axis.text = element_text(size = 18), axis.title = element_text(size = rel(1.75))) + theme(legend.key.size = unit(median_tableM, "in")) + expand_limits(x=map_data$long, y=map_data$lat)
ggplot(data = na.omit(median_tableM), aes(map_id = State)) + geom_map(aes(fill=value), map=map_data) +  theme(legend.text=element_text(size=24)) + theme(axis.text = element_text(size = 18), axis.title = element_text(size = rel(1.75))) + theme(legend.key.size = unit(1, "in")) + expand_limits(x=map_data$long, y=map_data$lat)
?ggplot
?geom_map
